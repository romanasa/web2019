package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.EventRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl<T> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    T find(String strTable, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(strTable)) {
                setParametersToStatement(statement, args);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toType(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't findById object.", e);
        }
    }

    List<T> findAll(String strTable, Object... args) {
        List<T> types = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(strTable)) {
                setParametersToStatement(statement, args);
                try (ResultSet resultSet = statement.executeQuery()) {
                    T type;
                    while ((type = toType(statement.getMetaData(), resultSet)) != null) {
                        types.add(type);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't findById object.", e);
        }
        return types;
    }

    void save(String strTable, T type, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(strTable, Statement.RETURN_GENERATED_KEYS)) {
                setParametersToStatement(statement, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save object.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        setIdAndCreationTime(type, generatedKeys);
                    } else {
                        throw new RepositoryException("Can't save object [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save object.", e);
        }
    }

    private void setParametersToStatement(PreparedStatement statement, Object[] args) throws SQLException {
        int count = 1;
        for (Object arg : args) {
            if (arg.getClass().toString().equals("class java.lang.String")) {
                statement.setString(count, arg.toString());
            } else if (arg.getClass().toString().equals("class java.lang.Long")) {
                statement.setLong(count, Long.parseLong(arg.toString()));
            }
            count++;
        }
    }

    abstract void setIdAndCreationTime(T type, ResultSet generatedKeys) throws SQLException;

    abstract T toType(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;
}
